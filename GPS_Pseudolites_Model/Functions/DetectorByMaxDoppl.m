function [positionPeakOfRangingCode,ByteShift] = ...
    ...
            DetectorByMaxDoppl(filenameForReading, NumberExp, constellation, ...
                                ShiftZero, Sampl_Freq, quant_accum, ...
                                threshold, len_CA)
%----------------------------------
% Detector in file *.dat
% 1 sec = r_c*NH*50*freq_sample
% Opening file
% filename = '2019_5_19_13_57_41_CN0_45_int16_SamplFreq_2_Sv_2_5_7_9_10_14__fDoppl_32_38_-509_483_-979_-2651_ByteShiftToFindSat100%_24396372.dat';%'signalTest1505.dat';
%----------------------------------

%----------------------------------
% Number Channels in File
% Possible variants: 1,2
% If 2 channels, signal in file is written like:|I(0ch)|Q(0ch)|I(1ch)|Q(1ch)
Number_chann = 1;% 1,2
%----------------------------------
% This is used only when more than 1 channel in file
UseChannel = 1;% 0,1 channel
%----------------------------------
freq_grid = -5*1e3 : 50 : 5*1e3;%Hz
%----------------------------------

%----------------------------------
DataType = 'int16';
bytesIn1Data = 2;%int16 - 2; double - 8;
%----------------------------------
% Sampl_Freq = 2;
%----------------------------------
number_of_satellites = 30;
%----------------------------------
% Shift in file from the beginning (in bytes)
Step_Shift = 24396372 ;%24394320 - double;24396372 (20957652) - int16 for generated by MATLAB;
%----------------------------------
% [filename,pathname] = uigetfile('*.dat','Selest File');%{'*.dat',
% FullName = [ pathname filename] ;
% Fid = fopen(FullName, 'r');
% figure;
% hold on;
%----------------------------------
prnSignal_length = len_CA * Sampl_Freq;
k = 1;
Num_Of_Needed_Samples = k*prnSignal_length;
correl_sum(number_of_satellites, length(freq_grid)) = struct ('accum_correl',0);

positionPeakOfRangingCode = zeros(NumberExp,length(constellation));
ByteShift = zeros(NumberExp,length(constellation));
for m = 1:length(constellation)
    Fid = fopen(filenameForReading{m}, 'r+');
    for n = 1:NumberExp
        for j = 1:quant_accum
            %     status = fseek(Fid,(j-1)*4*4092+40*4092, 'bof');%+40*4092
            % Why 4? Answer:one 2 from 'int16' and another 2 from real and image signal
            status = fseek(Fid, bytesIn1Data * (j-1) * prnSignal_length * 2 +...
                            bytesIn1Data * ShiftZero(m) + ...
                            (n-1) * bytesIn1Data * ...
                                prnSignal_length * quant_accum * 2, 'bof');%signal_new.txt
            if Number_chann == 1
                Buf = fread(Fid,[2,Num_Of_Needed_Samples*Number_chann],DataType);
                sig = Buf(1,:) + 1j*(Buf(2,:));
            elseif Number_chann == 2
                Buf = fread(Fid,[2,Num_Of_Needed_Samples*Number_chann],DataType);
                cc = complex(Buf(1,:), Buf(2,:));
                ch0 = cc(1:2:end);
                ch1 = cc(2:2:end);
                if UseChannel == 0
                    sig = ch0;
                elseif UseChannel == 1
                    sig = ch1;  
                end
            end
            signal((j - 1) * prnSignal_length + 1 : j * prnSignal_length) = sig;%Delete!!!
            posPeak = zeros(length(constellation), length(freq_grid));
            arr_q = zeros(length(constellation), length(freq_grid));

            for i = 1:length(constellation)
                sv2 = constellation(i);%Num of sat
                code2 = GenCACode( sv2 );
                bi_code_2 = bipolar( code2 );
                bi_codeX4_2 = discretizationX4( bi_code_2,  Sampl_Freq);

                for k = 1 : length( freq_grid )
                    if j == 1
                        correl_sum(i,k).accum_correl = 0;
                    end
                    phase = 0;
                    F_doppl_2 = analog(bi_codeX4_2, freq_grid(k), ...
                                                 phase,Sampl_Freq, len_CA);
                    R = calculation_autocorr_f(sig , F_doppl_2);
                    correl_sum(i,k).accum_correl = ...
                                             correl_sum(i,k).accum_correl +...
                                             (R.^2)./abs(R);
                    if j == quant_accum
                        Rsum = abs(correl_sum(i,k).accum_correl);
                        [ Max , posPeak(i,k) ] = max(Rsum );
                        if posPeak(i,k) == 1
                            RsumLeftfromPeak = Rsum(end);
                            RsumRightFromPeak = Rsum(posPeak(i,k)+1);
                       
                        elseif posPeak(i,k) == length(Rsum)
                            RsumRightFromPeak = Rsum(1);
                            RsumLeftfromPeak = Rsum(posPeak(i,k)-1);
                        else
                            RsumRightFromPeak = Rsum(posPeak(i,k)+1);
                            RsumLeftfromPeak = Rsum(posPeak(i,k)-1);
                        end
                        dTauN = (RsumRightFromPeak - RsumLeftfromPeak) / ...
                                (4 * Max - 2 * ...
                                   (RsumRightFromPeak + RsumLeftfromPeak));% hyperbolic approximation of correlation peak
                        R3 = [ Rsum(1 : (posPeak(i, k) - (Sampl_Freq + 1))), ...
                               Rsum((posPeak(i, k) + Sampl_Freq(+1)) : end)];
                        posPeak(i,k) = posPeak(i, k) + dTauN;
                        average = mean(R3);   
                        arr_q(i,k) = 1 - average / Max; 
                    end
                end
            end
            
        end
        for i = 1:length(constellation)
            [q, ind] = max(arr_q(i,:));
            if q > threshold
%                 figure;
                plot(correl_sum(i,ind).accum_correl);
                fprintf('q = %d, sv = %d, doppl = %d, posPeak = %d;\n',...
                            fix(q*100),constellation(i),...
                            freq_grid(ind),posPeak(i,ind))
                        
                positionPeakOfRangingCode(n,i) = posPeak(i,ind);
                ByteShift(n,i) = bytesIn1Data * (j - 1) * prnSignal_length + ...
                                 bytesIn1Data * ShiftZero(m) + ...
                                 (n - 1) * bytesIn1Data * ...
                                 prnSignal_length * quant_accum;
%                 bytesIn1Data*(j-1)*prnSignal_length*2 + bytesIn1Data*ShiftZero(m)+...
%                   (n-1)*bytesIn1Data*prnSignal_length*quant_accum*2, 'bof');%signal_new.txt
            end
        end
    end
    fclose(Fid);
end

% ----- Spectr of the signal: ----------------
% plot(20*log10(abs(fftshift(fft(signal)))))
%---------------------------------------------

fprintf('\n');

